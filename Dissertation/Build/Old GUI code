var WireFrameToggle = true;
function toggleModelWireframe () {
  var tempRot = new THREE.Vector3( );
  var tempSca = new THREE.Vector3( );
  var tempTra = new THREE.Vector3( );

  tempRot.x = model.rotation.x;
  tempRot.y = model.rotation.y;
  tempRot.z = model.rotation.z;
  tempTra.x = model.position.x;
  tempTra.y = model.position.y;
  tempTra.z = model.position.z;
  tempSca.x = model.scale.x;
  tempSca.y = model.scale.y;
  tempSca.z = model.scale.z;

  if (WireFrameToggle == true){

    scene.remove(model);
    model = wireframeModel.clone;
    scene.add(model);
    wireframeModel = false;

  }
  else {

    scene.remove(model);
    model = cloneModel.clone();
    scene.add(model);
    WireFrameToggle = true;

  }

  model.rotation.x = tempRot.x;
  model.rotation.y = tempRot.y;
  model.rotation.z = tempRot.z;
  model.position.x = tempTra.x;
  model.position.y = tempTra.y;
  model.position.z = tempTra.z;
  model.scale.x = tempSca.x;
  model.scale.y = tempSca.y;
  model.scale.z = tempSca.z;


}


function launchGUI () {
  var guiObject = function()
  {
    this.Lighting = true;
    this.AutoRotate = false;

    //Model Folder
    this.Reset = function() {
      model.rotation.x = 0;
      model.rotation.y = 0;
      model.rotation.z = 0;
      model.position.x = 0;
      model.position.y = 0;
      model.position.z = 0;
      model.scale.x = 1;
      model.scale.y = 1;
      model.scale.z = 1;
    }

    this.WireFrame = false;

    //Lights Folder
    this.GridMode = false;
    this.CameraReset = function() { controls.reset(); };
  };

  var modelRotate = function() {
    this.X = 0;
    this.Y = 0;
    this.Z = 0;
  };
  var modelTranslate = function() {
    this.X = 0;
    this.Y = 0;
    this.Z = 0;
  };
  var modelScale = function() {
    this.All = 1.0;
    this.X = 1.0;
    this.Y = 1.0;
    this.Z = 1.0;
  };

  window.onload = function() {
    var content = new guiObject();
    var modelR = new modelRotate();
    var modelT = new modelTranslate();
    var modelS = new modelScale();

    var gui = new dat.GUI();

    //Enable Lighting
    var lightController = gui.add(content, 'Lighting');
    lightController.onChange(function(value){
      if( value == false ) {
        scene.remove(pointLights[0], pointLights[1], pointLights[2], pointLights[3]);
        ambient.intensity = 1.0;
        shadowSwitch = false;
      }
      else {
        scene.add(pointLights[0], pointLights[1], pointLights[2], pointLights[3]);
        ambient.intensity = 0.5;
        shadowSwitch = true;
      }
    });

    //Auto Rotation
    var aRController = gui.add(content, 'AutoRotate');
    aRController.onChange(function(value){ controls.autoRotate = !controls.autoRotate; });

    //model Folder
    var modelFolder = gui.addFolder('Model');
    var wFController = modelFolder.add(content, 'WireFrame');

    var transformationsFolder = modelFolder.addFolder('Transformations')
    transformationsFolder.add(content, 'Reset');

    var rotationFolder = transformationsFolder.addFolder('Rotation');
    var mRX  = rotationFolder.add(modelR, 'X', -180, 180);
    mRX.onChange(function(value){ model.rotation.x = toRadians(value); });
    var mRY  = rotationFolder.add(modelR, 'Y', -180, 180);
    mRY.onChange(function(value){ model.rotation.y = toRadians(value); });
    var mRZ  = rotationFolder.add(modelR, 'Z', -180, 180);
    mRZ.onChange(function(value){ model.rotation.z = toRadians(value); });


    var translationFolder = transformationsFolder.addFolder('Translation');
    var mTX  = translationFolder.add(modelT, 'X', planeSize.min.x, -planeSize.min.x);
    mTX.onChange(function(value){ model.position.x = value; });
    var mTY  = translationFolder.add(modelT, 'Y', -3, 25);
    mTY.onChange(function(value){ model.position.y = value; });
    var mTZ  = translationFolder.add(modelT, 'Z', planeSize.min.x, -planeSize.min.x);
    mTZ.onChange(function(value){ model.position.z = value; });

    var scaleFolder = transformationsFolder.addFolder('Scale');
    var mSA = scaleFolder.add(modelS, 'All', 0.1, 10);
    mSA.onChange(function(value){

      model.scale.x = value;
      model.scale.y = value;
      model.scale.z = value;

    });
    var mSX  = scaleFolder.add(modelS, 'X', 0.1, 10);
    mSX.onChange(function(value){ model.scale.x = value; });
    var mSY  = scaleFolder.add(modelS, 'Y', 0.1, 10);
    mSY.onChange(function(value){ model.scale.y = value; });
    var mSZ  = scaleFolder.add(modelS, 'Z', 0.1, 10);
    mSZ.onChange(function(value){ model.scale.z = value; });

    //Grid Mode
    var gridController = gui.add(content, 'GridMode');
    gridController.onChange(function(value){
      if (value === true) {

        scene.add ( gridHelper );
        scene.remove ( plane );
        scene.add (lightHelpers[0], lightHelpers[1], lightHelpers[2], lightHelpers[3]);
        gridHelperOn = true;
        controls.maxPolarAngle = Math.PI;
      }

      else {
        scene.remove ( gridHelper );
        scene.add ( plane );
        scene.remove (lightHelpers[0], lightHelpers[1], lightHelpers[2], lightHelpers[3]);
        gridHelperOn = false;
        controls.maxPolarAngle = 1.5;
      }
    });

    gui.add(content, 'CameraReset');
  }
}
